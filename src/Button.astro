---
import type { HTMLAttributes } from "astro/types";
import clsx from "clsx";
import { twMerge } from "tailwind-merge";
import type {
  ComponentColor,
  ComponentShape,
  ComponentSize,
  IComponentBaseProps,
} from "./types";
// Write your component code in this file!
type Props = Omit<HTMLAttributes<"button">, "color" | "size"> &
  IComponentBaseProps & {
    shape?: ComponentShape;
    size?: ComponentSize;
    variant?: "outline" | "link";
    color?: ComponentColor;
    glass?: boolean;
    wide?: boolean;
    fullWidth?: boolean;
    responsive?: boolean;
    animation?: boolean;
    loading?: boolean;
    active?: boolean;
    disabled?: boolean;
  };
const {
  shape,
  size,
  variant,
  color,
  glass,
  wide,
  fullWidth,
  responsive,
  animation = true,
  loading,
  active,
  disabled,
  dataTheme,
  class: className,
  style,
  ...props
} = Astro.props;
const slots = Astro.slots;
const classes = twMerge(
  "btn",
  className,
  clsx((slots.has("startIcon") && !loading) || slots.has("endicon")) && "gap-2",
  {
    //@ts-ignore
    "btn-lg": size === "lg",
    "btn-md": size === "md",
    "btn-sm": size === "sm",
    "btn-xs": size === "xs",
    "btn-circle": shape === "circle",
    "btn-square": shape === "square",
    "btn-outline": variant === "outline",
    "btn-link": variant === "link",
    "btn-neutral": color === "neutral",
    "btn-primary": color === "primary",
    "btn-secondary": color === "secondary",
    "btn-accent": color === "accent",
    "btn-info": color === "info",
    "btn-success": color === "success",
    "btn-warning": color === "warning",
    "btn-error": color === "error",
    "btn-ghost": color === "ghost",
    glass: glass,
    "btn-wide": wide,
    "btn-block": fullWidth,
    "btn-xs sm:btn-sm md:btn-md lg:btn-lg": responsive,
    "no-animation": !animation,
    "btn-active": active,
    "btn-disabled": disabled,
  }
);
---

<button
  {...props}
  class={classes}
  data-theme={dataTheme}
  style={style}
  disabled={disabled}
>
  {slots.has("startIcon") && !loading && <slot name="startIcon" />}
  <slot />
  {slots.has("endIcon") && !loading && <slot name="endIcon" />}
  {
    loading && (
      <div class="btn-loading">
        <div class="btn-loading-inner">
          <div class="btn-loading-line" />
          <div class="btn-loading-line" />
          <div class="btn-loading-line" />
        </div>
      </div>
    )
  }
</button>
